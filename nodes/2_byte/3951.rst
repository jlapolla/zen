=========================================
Fixing defensive programming antipatterns
=========================================

Pretend your name is Brutus, and you're a proponent of defensive programming.
You probably write code like this:

.. code:: python

  # Python code.

  def sqrt(x):

      if x < 0:
          raise Exception('domain error')

      # Fancy square root code here!
      # ...
      return result

During a code review, your coworker, Octavius, points out that you didn't check
if ``x`` was a number. "What if I pass a boolean?" he asks. He has a point.
"Okay, let me update ``sqrt()``" you reply.

.. code:: diff

   # Diff.

   def sqrt(x):

  +    if not (isinstance(x, int) or isinstance(x, float)):
  +        raise Exception('not a number')
  +
       if x < 0:
           raise Exception('domain error')

       # Fancy square root code here!
       # ...
       return result

.. code:: python

  # Python code.

  def sqrt(x):

      if not (isinstance(x, int) or isinstance(x, float)):
          raise Exception('not a number')

      if x < 0:
          raise Exception('domain error')

      # Fancy square root code here!
      # ...
      return result

You're pleased with yourself. Octavius raises his hand again: "Brutus, what if I
pass a list of numbers?" he asks. You think about what should happen if client
code passes a list to ``sqrt()``. "Well, if the client passes a list of numbers,
I suppose I should return a list of their square roots" you reply. You add
another check to ``sqrt()``.

.. code:: python

  # Python code.

  def sqrt(x):

      if isinstance(x, list):
          return map(sqrt, x)

      if not (isinstance(x, int) or isinstance(x, float)):
          raise Exception('not a number')

      if x < 0:
          raise Exception('domain error')

      # Fancy square root code here!
      # ...
      return result

You're pleased with yourself again. But Octavius raises his hand again: "What if
I pass a string?" You consider it for a moment, and reply "Well, I suppose I
could try to convert it to a number."

.. code:: python

  # Python code.

  def sqrt(x):

      if isinstance(x, list):
          return map(sqrt, x)

      if isinstance(x, str):
          return sqrt(float(x))

      if not (isinstance(x, int) or isinstance(x, float)):
          raise Exception('not a number')

      if x < 0:
          raise Exception('domain error')

      # Fancy square root code here!
      # ...
      return result

Finally, Octavius is satisfied. ``sqrt()`` rejects all inputs that are not
numbers, unless the input is a list, in which case it applies ``sqrt()`` to
every member of the list. Or if the input is a string, it converts it to a
number, and applies ``sqrt()``. It seems bullet proof. It even has the added
benefit that it will handle a list of strings!

Separating responsibilities
===========================

Now I'm going to propose that we make ``sqrt()`` even more modular. Let's
decompose it into a suite of related functions. Our goal is to give each
function a single responsibility. That way, our code follows the `single
responsibility principle`_.

.. _`single responsibility principle`: https://en.wikipedia.org/wiki/Single_responsibility_principle

As a first step, we'll separate the argument checks from the "fancy square root"
algorithm.

.. code:: python

  # Python code.

  def checked_sqrt(x):

      if isinstance(x, list):
          return map(checked_sqrt, x)

      if isinstance(x, str):
          return checked_sqrt(float(x))

      if not (isinstance(x, int) or isinstance(x, float)):
          raise Exception('not a number')

      if x < 0:
          raise Exception('domain error')

      return sqrt(x)

  def sqrt(x):

      # Fancy square root code here!
      # ...
      return result

Next, we'll separate the type detection from the action performed on each type.

.. code:: python

  # Python code.

  def checked_sqrt(x):

      if isinstance(x, list):
          return sqrt_list(x)

      if isinstance(x, str):
          return sqrt_str(x)

      if not (isinstance(x, int) or isinstance(x, float)):
          raise Exception('not a number')

      if x < 0:
          raise Exception('domain error')

      return sqrt(x)

  def sqrt_list(x):
      return map(checked_sqrt, x)

  def sqrt_str(x):
      return checked_sqrt(float(x))

  def sqrt(x):

      # Fancy square root code here!
      # ...
      return result

It seems odd that there's a ``sqrt_list()`` and a ``sqrt_str()``, but there's no
``sqrt_int()`` or ``sqrt_float()``. For the sake of symmetry, we'll refactor to
introduce ``sqrt_int()`` and ``sqrt_float()``.

.. code:: python

  # Python code.

  def checked_sqrt(x):

      if isinstance(x, list):
          return sqrt_list(x)

      if isinstance(x, str):
          return sqrt_str(x)

      if isinstance(x, int):
          return sqrt_int(x)

      if isinstance(x, float):
          return sqrt_float(x)

      raise Exception('unhandled type')

  def sqrt_list(x):
      return map(checked_sqrt, x)

  def sqrt_str(x):
      return sqrt_float(float(x))

  def sqrt_int(x):
      if x < 0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt_float(x):
      if x < 0.0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt(x):

      # Fancy square root code here!
      # ...
      return result

Look at that beautiful symmetry. Now the separation of responsibilities is
clear.

- ``checked_sqrt()`` checks the type of ``x``, and dispatches to the associated
  function.
- ``sqrt_list()`` handles ``list`` type arguments.
- ``sqrt_str()`` handles ``str`` type arguments.
- ``sqrt_int()`` handles ``int`` type arguments.
- ``sqrt_float()`` handles ``float`` type arguments.
- ``sqrt()`` does the actual "fancy square root" algorithm.

Octavius strikes back
=====================

In your next code review, Octavius isn't happy. He says, "Brutus, now I can't
pass a string to ``sqrt()``." You reply, "If you want to pass a string, use
``sqrt_str()``."

"But what if I want to pass a variable without worrying about its type?" he
whines. You reply, "Use ``checked_sqrt()`` for that. It will take any type of
argument."

"But what if I want to pass a boolean and have it interpreted as zero or one?"
he insists. A little annoyed, you reply "Octavius, why would you want to take
the square root of zero or one. You already know that the square root of zero is
zero and the square root of one is one. If you really want, I can make a
``sqrt_bool()`` function that returns ``1`` for ``True`` and ``0`` for
``False``. But what's the point?"

"Well, okay" he says. "But, would you please at least document the preconditions
of your functions. I don't want to end up accidentally passing a list to
``sqrt_int()`` or a string to ``sqrt_list()``." You think about this a moment.
"I guess I could document the preconditions of each function. I had thought it
was obvious and easy to remember what type of arguments you can pass to each
function since the function is named after the type of the argument. Do you
really need this documented to use these functions correctly?"

Octavius says, "Well, I guess that's true for most of the functions. And
``checked_sqrt()`` will accept any argument type, so I'm not worried about that
one. But ``sqrt()`` doesn't have the argument type in its name. Can you just
document the preconditions for ``sqrt()`` so I don't call it with the wrong
arguments?"

This sounds reasonable to you. You update your code.

.. code:: python

  # Python code.

  def checked_sqrt(x):

      if isinstance(x, list):
          return sqrt_list(x)

      if isinstance(x, str):
          return sqrt_str(x)

      if isinstance(x, int):
          return sqrt_int(x)

      if isinstance(x, float):
          return sqrt_float(x)

      raise Exception('unhandled type')

  def sqrt_list(x):
      return map(checked_sqrt, x)

  def sqrt_str(x):
      return sqrt_float(float(x))

  def sqrt_int(x):
      if x < 0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt_float(x):
      if x < 0.0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt(x):

      """Apply the "fancy square root" algorithm to 'x'.

      Preconditions:
      - 'x' is a number.
      - 'x' is greater than or equal to zero.
      """

      # Fancy square root code here!
      # ...
      return result

Octavius is reasonably happy with this. "One more request," he adds. "Can you at
least check that ``x`` is not negative in ``sqrt()``?" he asks. You concede.
"Okay, Octavius" you say. You change the code again.

.. code:: python

  # Python code.

  def checked_sqrt(x):

      if isinstance(x, list):
          return sqrt_list(x)

      if isinstance(x, str):
          return sqrt_str(x)

      if isinstance(x, int):
          return sqrt_int(x)

      if isinstance(x, float):
          return sqrt_float(x)

      raise Exception('unhandled type')

  def sqrt_list(x):
      return map(checked_sqrt, x)

  def sqrt_str(x):
      return sqrt_float(float(x))

  def sqrt_int(x):
      if x < 0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt_float(x):
      if x < 0.0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt(x):

      """Apply the "fancy square root" algorithm to 'x'.

      Preconditions:
      - 'x' is a number.
      - 'x' is greater than or equal to zero.
      """

      if x < 0.0:
          raise Exception('domain error')

      # Fancy square root code here!
      # ...
      return result

Using your code
===============

With ``sqrt()`` and friends out of the way, you start writing functions that use
your new square root library. You start on the ``floopteedoo()`` function.

.. code:: python

  def floopteedoo(x):
      if not (isinstance(x, int)):
          raise Exception('not an int')
      result = []
      while x > 0:
          result.append(checked_sqrt(x))
          x -= 1
      return result

You review your code carefully. Then you realize that by the time you call
``checked_sqrt()``, you have already verified that ``x`` is an integer. You know
that ``checked_sqrt()`` is going to check the type of ``x`` again, you know that
the check is redundant, and you want your code to run just a bit faster. So, you
change it to call ``sqrt_int()`` directly, instead of calling
``checked_sqrt()``.

.. code:: python

  def floopteedoo(x):
      if not (isinstance(x, int)):
          raise Exception('not an int')
      result = []
      while x > 0:
          result.append(sqrt_int(x))
          x -= 1
      return result

Then, you notice something else: because of the condition in the while loop, you
know that ``x`` is non-negative when you call ``sqrt_int()``. You also know that
``sqrt_int()`` is going to check if ``x`` is non-negative, and then pass it to
``sqrt()``. So, why not skip the extra non-negative check, and pass ``x``
directly to ``sqrt()``? You update your code to call ``sqrt()`` directly instead
of calling ``sqrt_int()``.

.. code:: python

  def floopteedoo(x):
      if not (isinstance(x, int)):
          raise Exception('not an int')
      result = []
      while x > 0:
          result.append(sqrt(x))
          x -= 1
      return result

You continue with writing your the other functions you need to implement your
new feature: ``dingarang()``, ``hollybar()``, and ``umbilicate()``. Each of
these functions uses some features from your new square root library.

*Aside:* In this case, the performance benefit from calling ``sqrt()`` directly
is negligible because the checks that ``checked_sqrt()`` performs are fast.
However, there are cases where the cost of an extra check is substantial.
Consider a function that takes a directed acyclic graph, ``topo_order(g)``, and
the checked version ``checked_topo_order(g)`` that checks ``g.has_cycles()``
before calling down to ``topo_order(g)``. If ``g`` is a graph without cycles,
performing the cycle check will visit every node and edge in the graph, a very
expensive operation. Therefore, you want to do the cycle check **ONLY ONCE**,
and skip subsequent checks. So, if you already have a graph that you know has no
cycles, you want to call ``topo_order(g)`` directly, instead of calling
``checked_topo_order(g)``. Otherwise your performance will suffer.

*Aside:* In a large application, call stacks can be hundreds or thousands of
function calls deep. If each function in the call stack checks the type of ``x``
before passing it to the next function, the performance impact can really add
up. Now, apply that same reasoning to our ``topo_order(g)`` example; you
certainly don't want to call ``g.has_cycles()`` thousands of times!

Code coverage
=============

Now it's time to test your new feature. You start by writing unit tests for all
the functions in your square root library. Then you write unit tests for the
other functions in your feature: ``dingarang()``, ``hollybar()``, and
``umbilicate()``.

The test coverage / feature conundrum
+++++++++++++++++++++++++++++++++++++

You run the unit tests and generate a code coverage report. The coverage report
says you've failed to test one line of the square root library. You open the
annotated source file to see which line you failed to test.

.. code:: diff

   def sqrt(x):

       """Apply the "fancy square root" algorithm to 'x'.

       Preconditions:
       - 'x' is a number.
       - 'x' is greater than or equal to zero.
       """

       if x < 0.0:
  -        raise Exception('domain error')

       # Fancy square root code here!
       # ...
       return result

Hmm, you forgot to test that "domain error" is raised when you pass a negative
number to ``sqrt()``. You sit down to write a test for this.

.. code:: python

  import pytest

  def test_negative_sqrt():
      with pytest.raises(Exception):
          sqrt(-1)


That ought to do it. But, wait a minute. The preconditions of ``sqrt()`` say
that ``x`` must be greater than or equal to zero. So, your test function is
violating the preconditions by calling ``sqrt(-1)``, and you know that calling
code must respect the preconditions of a called function. At the same time, you
know that the only way to test that the "domain error" exception is raised is to
violate the preconditions of ``sqrt()``. Is it proper to violate this
precondition in test code, in order to check the behavior when the precondition
is violated?

You ponder this for a moment. Well, you typically want tests for all of your
supported features. This includes the behavior of functions under all supported
conditions. But what about unsupported conditions? You know that violating the
precondition of ``sqrt()`` is by definition not a supported condition. In
general, should we test unsupported conditions?

You recall the definition of a test: a test is an executable specification. You
repeat this to yourself again: **"A test is a specification."**

Suddenly it hits you: by testing ``sqrt(-1)`` and expecting it to raise "domain
error", you're making the claim that this is an officially supported feature of
the ``sqrt()`` function. In other words, if you test ``sqrt(-1)`` and expect it
to raise "domain error", then that is equivalent to adding this behavior to the
publicly documented specification of ``sqrt()``. This means that you must
maintain the feature for backwards compatibility. In fact, this means that
client code can **RELY** on the feature being supported for the forseeable
future.

Now you have two options before you:

- Alter the preconditions of ``sqrt()`` to make ``sqrt(-1)`` a valid call, with
  a well-defined behavior and supporting tests.
- Remove the test for ``sqrt(-1)``.

You think it's silly to make ``sqrt(-1)`` an officially supported feature, so
you opt for the second option: you remove the ``sqrt(-1)`` test and leave the
preconditions of ``sqrt()`` unchanged.

But you still have to code coverage issue.

.. code:: diff

   def sqrt(x):

       """Apply the "fancy square root" algorithm to 'x'.

       Preconditions:
       - 'x' is a number.
       - 'x' is greater than or equal to zero.
       """

       if x < 0.0:
  -        raise Exception('domain error')

       # Fancy square root code here!
       # ...
       return result

You ponder this for a while. You conclude, "I guess, because of the way I've
defined the preconditions, checking for ``x`` less than zero and raising an
exception is actually dead code. And since it's dead code, I should remove it
entirely. That code will never be executed if the client code is well-formed.
And if the client code is ill-formed and does something like ``sqrt(-1)``,
that's unsupported behavior, and it represents a bug in the client code."

It doesn't feel right to you. You've been taught all your life that defensive
programming is a gift from heaven. But you've run into this test coverage /
feature conundrum now, and you can see no way to solve it but to remove the
precondition check from ``sqrt()``. You reflect, "I guess I'll remove it, and
see what happens, but I'm sure Octavius will have something to say about it."

Unused functions
++++++++++++++++

With the ``sqrt()`` code coverage issue resolved, you look over the code
coverage report once more. This time, you focus on the coverage for your special
case square root functions (i.e. ``check_sqrt()``, ``sqrt_list()``,
``sqrt_str()``, ``sqrt_int()``, and ``sqrt_float()``). You notice that each of
your special case functions is called only once. In fact, the special case
functions are only called from the test code. Your actual feature functions
(i.e. ``dingarang()``, ``hollybar()``, and ``umbilicate()``) never call the
special case functions; they only call ``sqrt()``. Why is that? Because by the
time they need to take the square root of a variable, they have already verified
that the variable is a positive number.

"So, it looks like I don't actually need these special case functions," you
reflect. But that's good code; why remove it? Well, if you remove those
functions, then you can also remove the tests for those functions, and that
actually removes a substantial amount of code. It makes your square root library
short, sweet, and to the point.

You are loathe to remove your special case functions that you worked so hard to
write and test. You take one last look at them.

.. code:: python

  def checked_sqrt(x):

      if isinstance(x, list):
          return sqrt_list(x)

      if isinstance(x, str):
          return sqrt_str(x)

      if isinstance(x, int):
          return sqrt_int(x)

      if isinstance(x, float):
          return sqrt_float(x)

      raise Exception('unhandled type')

  def sqrt_list(x):
      return map(checked_sqrt, x)

  def sqrt_str(x):
      return sqrt_float(float(x))

  def sqrt_int(x):
      if x < 0:
          raise Exception('domain error')
      return sqrt(x)

  def sqrt_float(x):
      if x < 0.0:
          raise Exception('domain error')
      return sqrt(x)

You think "I suppose they are rather silly functions. I mean, these are all
things that client code could easily do itself. In fact, my other feature
functions, ``dingarang()``, ``hollybar()``, and ``umbilicate()`` already do
these things. I guess these special case functions aren't adding any real value
to the square root library." And with that, you bid your special case functions
farewell, and remove them and the code that tests them.

*Aside:* Consider this: where is the value-added in our square root library? The
value-added is in the "fancy square root" algorithm. The special case functions
like ``sqrt_list()`` and ``sqrt_str()`` are all very small and very simple.
These special case functions are performing checks and doing things that client
code can easily check and do itself. In fact, in most cases, the client code is
already performing these checks itself. Is it worth your time to write these
special-case functions? The client code could easily do without them. Why not
spend more time on your actual value added: spend time improving the "fancy
square root" algorithm! Or move on to implement another needed feature!

*Aside:* If the performance arguments against defensive programming don't
convince you, then perhaps the maintainability arguments will. Look how much
special-case code we were able to remove by restricting the preconditions of
``sqrt()`` and letting client code handle special cases itself! Consider how
many fewer tests we need to write!
